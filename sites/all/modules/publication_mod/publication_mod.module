<?php
// Copyright FORTH-ICS, Emmanouil Dermitzakis
// -*- mode: php;-*-

/**
 * Implements hook_help()
 */
function publication_mod_help($path, $arg) {
  switch ($path) {
    case "admin/help#publication_mod":
      return '' . t("Provides publication management system") . '';
      break;
  }
}

/**
 * Implements hook_menu()
 */
function publication_mod_menu(){
  $menu['ajax/pub_mod_blazegraph'] = array(
    'title' => '',
    'page callback' => 'publication_mod_ajax_callback_blazegraph',
    'access callback' => TRUE,
    'type' => MENU_CALLBACK
  );

  $menu['ajax/add_publication_page'] = array(
    'title' => '',
    'page callback' => 'publication_mod_ajax_callback',
    // 'page arguments' => array(2),
    'access callback' => 'publication_mod_user_has_role',
    'access arguments' => array('authenticated user'),
    'type' => MENU_CALLBACK
  );

  $menu['ajax/get_path_from_uuid'] = array(
    'title' => '',
    'page callback' => 'publication_mod_ajax_callback_get_path',
    'access callback' => 'publication_mod_user_has_role',
    'access arguments' => array('authenticated user'),
    'type' => MENU_CALLBACK
  );

  $menu['ajax/edit_publication_page'] = array(
    'title' => '',
    'page callback' => 'publication_mod_ajax_callback_edit_pub',
    'access callback' => 'publication_mod_user_has_role',
    'access arguments' => array('authenticated user'),
    'type' => MENU_CALLBACK
  );

  $menu['ajax/update_pub_pages'] = array(
    'title' => '',
    'page callback' => 'publication_mod_update_pubs',
    'access callback' => 'publication_mod_user_has_role',
    'access arguments' => array('authenticated user'),
    'type' => MENU_CALLBACK
  );

  $menu['admin/config/publications'] = array(
    'title' => 'Publications',
    'description' => 'Publications Description',
    'position' => 'right',
    'weight' => 10,
    'page callback' => 'system_admin_menu_block_page',
    'access arguments' => array('administer site configuration'),
    'file' => 'system.admin.inc',
    'file path' => drupal_get_path('module', 'system'),
  );

  $menu['admin/config/publications/publication_mod'] = array(
    'title' => 'PRESS Publication Module',
    'description' => 'Configuration for PRESS Publication Module',
    'page callback' => 'publication_mod_settings_page',
    // 'page arguments' => array('publication_mod_settings_form'),
    'access arguments' => array('access administration pages'),
    'file' => 'publication_mod.admin.inc',
    // 'type' => MENU_NORMAL_ITEM,
  );

  $menu['admin/config/publications/publication_mod/default'] = array(
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'title' => 'PRESS Publication Module',
    'weight' => 1,
    // 'type' => MENU_NORMAL_ITEM,
  );

  $menu['admin/config/publications/publication_mod/internal_authors'] = array(
    'type' => MENU_NORMAL_ITEM,
    'title' => 'Edit Internal Authors',
    'page callback' => '_internal_authors_edit',
    'access arguments' => array('access administration pages'),
    'file' => 'publication_mod.admin.inc',
  );

  $menu['admin/config/publications/publication_mod/external_authors'] = array(
    'type' => MENU_NORMAL_ITEM,
    'title' => 'Edit External Authors',
    // 'weight' => 2,
    'page callback' => '_external_authors_edit',
    'access arguments' => array('access administration pages'),
    'file' => 'publication_mod.admin.inc',
  );

  $menu['admin/config/publications/publication_mod/merge_authors'] = array(
    'type' => MENU_NORMAL_ITEM,
    'title' => 'Merge Authors',
    'page callback' => '_merge_authors',
    'access arguments' => array('access administration pages'),
    'file' => 'publication_mod.admin.inc',
  );

  $menu['admin/config/publications/publication_mod/projects'] = array(
    'type' => MENU_NORMAL_ITEM,
    'title' => 'Edit Projects',
    // 'weight' => 3,
    'page callback' => '_projects_edit',
    'access arguments' => array('access administration pages'),
    'file' => 'publication_mod.admin.inc',
  );

  $menu['admin/config/publications/publication_mod/tags'] = array(
    'type' => MENU_NORMAL_ITEM,
    'title' => 'Edit Tags',
    // 'weight' => 4,
    'page callback' => '_tags_edit',
    'access arguments' => array('access administration pages'),
    'file' => 'publication_mod.admin.inc',
  );

  $menu['admin/config/publications/publication_mod/import_pubs'] = array(
    'type' => MENU_NORMAL_ITEM,
    'title' => 'Import Blazegraph Publications',
    // 'weight' => 5,
    'page callback' => 'drupal_get_form',
    'page arguments' => array('publication_mod_import_pubs_form'),
    'access arguments' => array('access administration pages'),
    'file' => 'publication_mod.admin.inc',
  );

  $menu['admin/config/publications/publication_mod/edit_orgs'] = array(
    'type' => MENU_NORMAL_ITEM,
    'title' => 'Edit Organizations',
    // 'weight' => 6,
    'page callback' => 'drupal_get_form',
    'page arguments' => array('publication_mod_edit_orgs_form'),
    'access arguments' => array('access administration pages'),
    'file' => 'publication_mod.admin.inc',
  );

  $menu['admin/config/publications/publication_mod/import_pubs/progress'] = array(
    'title' => t('Import progress'),
    'page callback' => 'publication_mod_import_progress',
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
    'file' => 'publication_mod.admin.inc',
  );


  $menu_links = [];
  $parent_link = array(
    'link_path' => 'publication/search-pub',
    'link_title' => 'Publications',
    'expanded' => TRUE,
    'menu_name' => 'main-menu',
    'weight' => -5
  );
  $current_links = menu_load_links('main-menu');
  $found = FALSE;
  $mlid = 0;
  foreach ($current_links as $current) {
    if($parent_link['link_path'] === $current['link_path'] &&
        $parent_link['link_title'] === $current['link_title']){
      $found = TRUE;
      $mlid = $current['mlid'];
    }
  }

  if (!$found){
    $mlid = menu_link_save($parent_link);
  }

  $menu['publication/edit'] = array(
    'title' => 'Edit Publication',
    // 'type' => MENU_LOCAL_TASK,
    'description' => 'Edit a Publication',
    'page callback' => 'publication_mod_page_edit_publication',
    'access callback' => 'publication_mod_user_has_role',
    'access arguments' => array('authenticated user'),
    'file' => 'publication_mod.pages.inc',
  );

  $menu['publication/add-pub'] = array(
    'title' => 'Add New Publication',
    'description' => 'Add New Publication',
    'page callback' => 'publication_mod_page_add_publication',
    'access callback' => 'publication_mod_user_has_role',
    'access arguments' => array('authenticated user'),
    'file' => 'publication_mod.pages.inc',
  );

  $menu['publication/all'] = array(
    'title' => 'All Publications',
    'description' => 'All Publications',
    'page callback' => 'publication_mod_page_all_publications',
    'access callback' => TRUE,
    'file' => 'publication_mod.pages.inc',
  );

  $menu['publication/author/%'] = array(
    'title' => "Author's Publications",
    'description' => 'Publications of an Author',
    'page callback' => 'publication_mod_page_author_publications',
    'page arguments' => array(2),
    'access callback' => TRUE,
    'file' => 'publication_mod.pages.inc',
  );

  $menu_links[0] = array(
    'link_path' => 'publication/add-pub',
    'link_title' => 'Add Publication',
    'menu_name' => 'main-menu',
    'plid' => $mlid,
    'weight' => 2
  );

  $menu['publication/search-pub'] = array(
    'title' => 'Search Publication',
    'description' => 'Search for Publications',
    'page callback' => 'publication_mod_page_search_publication',
    'access callback' => TRUE,
    'file' => 'publication_mod.pages.inc',
  );

  $menu_links[1] = array(
    'link_path' => 'publication/search-pub',
    'link_title' => 'Search Publication',
    'menu_name' => 'main-menu',
    'plid' => $mlid,
    'weight' => 0
  );

  $menu['press/add-project'] = array(
    'title' => 'Add Project',
    'description' => 'Add Project',
    'page callback' => 'publication_mod_page_add_project',
    'access callback' => 'publication_mod_user_has_role',
    'access arguments' => array('Publication Mod Power User'),
    'file' => 'publication_mod.pages.inc',
  );

  $menu_links[2] = array(
    'link_path' => 'press/add-project',
    'link_title' => 'Add Project',
    'menu_name' => 'main-menu',
    'weight' => 11
  );

  $menu['publication/my-pubs'] = array(
    'title' => 'My Publications',
    'description' => 'My Publications',
    'page callback' => 'publication_mod_dummy_page',
    'access callback' => 'publication_mod_user_has_role',
    'access arguments' => array('authenticated user'),
  );

  $menu_links[3] = array(
    'link_path' => 'publication/my-pubs',
    'link_title' => 'My Publications',
    'menu_name' => 'main-menu',
    'module' => 'publication_mod',
    'plid' => $mlid,
    'weight' => 1
  );

  foreach ($menu_links as $link) {
    $found = FALSE;
    foreach ($current_links as $current) {
      if($link['link_path'] === $current['link_path'] &&
          $link['link_title'] === $current['link_title']){
        $found = TRUE;
      }
    }
    if (!$found){
      menu_link_save($link);
    }
  }

  // RESTful API urls & callbacks
  
  $menu['ajax/publications/get_publication_info'] = array(
    'title' => '',
    'page callback' => '_get_publication_info',
    'access callback' => 'publication_mod_user_has_role',
    'access arguments' => array('authenticated user'),
    'file' => 'publication_mod.rest.inc',
    'type' => MENU_CALLBACK
  );

  $menu['ajax/publications/get_categories'] = array(
    'title' => '',
    'page callback' => '_get_categories',
    'access callback' => 'publication_mod_user_has_role',
    'access arguments' => array('authenticated user'),
    'file' => 'publication_mod.rest.inc',
    'type' => MENU_CALLBACK
  );

  $menu['ajax/publications/get_tags'] = array(
    'title' => '',
    'page callback' => '_get_tags',
    'access callback' => 'publication_mod_user_has_role',
    'access arguments' => array('authenticated user'),
    'file' => 'publication_mod.rest.inc',
    'type' => MENU_CALLBACK
  );

  $menu['ajax/publications/search_tag'] = array(
    'title' => '',
    'page callback' => '_search_tag',
    'access callback' => 'publication_mod_user_has_role',
    'access arguments' => array('authenticated user'),
    'file' => 'publication_mod.rest.inc',
    'type' => MENU_CALLBACK
  );

  $menu['ajax/publications/get_data_properties'] = array(
    'title' => '',
    'page callback' => '_get_data_properties',
    'access callback' => 'publication_mod_user_has_role',
    'access arguments' => array('authenticated user'),
    'file' => 'publication_mod.rest.inc',
    'type' => MENU_CALLBACK
  );

  $menu['ajax/publications/search_author'] = array(
    'title' => '',
    'page callback' => '_search_author',
    'access callback' => 'publication_mod_user_has_role',
    'access arguments' => array('authenticated user'),
    'file' => 'publication_mod.rest.inc',
    'type' => MENU_CALLBACK
  );

  $menu['ajax/publications/get_uuid'] = array(
    'title' => '',
    'page callback' => '_get_uuid',
    'access callback' => 'publication_mod_user_has_role',
    'access arguments' => array('authenticated user'),
    'file' => 'publication_mod.rest.inc',
    'type' => MENU_CALLBACK
  );

  $menu['ajax/publications/add_external_author'] = array(
    'title' => '',
    'page callback' => '_add_external_author',
    'access callback' => 'publication_mod_user_has_role',
    'access arguments' => array('authenticated user'),
    'file' => 'publication_mod.rest.inc',
    'type' => MENU_CALLBACK
  );

  $menu['ajax/publications/search_project'] = array(
    'title' => '',
    'page callback' => '_search_project',
    'access callback' => 'publication_mod_user_has_role',
    'access arguments' => array('authenticated user'),
    'file' => 'publication_mod.rest.inc',
    'type' => MENU_CALLBACK
  );

  $menu['ajax/publications/add_publication'] = array(
    'title' => '',
    'page callback' => '_add_publication',
    'access callback' => 'publication_mod_user_has_role',
    'access arguments' => array('authenticated user'),
    'file' => 'publication_mod.rest.inc',
    'type' => MENU_CALLBACK
  );

  $menu['ajax/publications/edit_publication'] = array(
    'title' => '',
    'page callback' => '_edit_publication',
    'access callback' => 'publication_mod_user_has_role',
    'access arguments' => array('authenticated user'),
    'file' => 'publication_mod.rest.inc',
    'type' => MENU_CALLBACK
  );

  $menu['ajax/publications/delete_publication'] = array(
    'title' => '',
    'page callback' => '_delete_publication',
    'access callback' => 'publication_mod_user_has_role',
    'access arguments' => array('authenticated user'),
    'file' => 'publication_mod.rest.inc',
    'type' => MENU_CALLBACK
  );

  menu_cache_clear_all();

  return $menu;
}


/**
 * Dummy page callback for publication/my-pubs
 */
function publication_mod_dummy_page(){
  return;
}

/**
 * Implements hook_menu_link_alter
 * Used to create the my publication menu link
 */
function publication_mod_menu_link_alter(&$link){
  if ($link['link_path'] == 'publication/my-pubs' && $link['module'] == 'publication_mod'){
    $link['options']['alter'] = TRUE;
  }
}

/**
 * Implements hook_translated_menu_link_alter
 * Used to create the my publication menu link
 */
function publication_mod_translated_menu_link_alter(&$link){
  global $user;

  if ($link['link_path'] == 'publication/my-pubs' && $link['module'] == 'publication_mod' && !user_is_anonymous()){
    $user_data = user_load($user->uid);
    if($user_data->pub_mod_field_add_to_blzg['und'][0]['value'] && !empty($user_data->pub_mod_field_blazegraph_uuid['und'][0]['value'])){
      $link['href'] = 'publication/search-pub';
      $link['localized_options'] = array(
        'query' => array(
          'type' => 'advanced',
          'reviewed' => 'false',
          'authors0' => $user_data->pub_mod_field_blazegraph_uuid['und'][0]['value'],
        ),
      );
    }else{
      $link['hidden'] = 1;
    }
  }
}

function publication_mod_ajax_callback_blazegraph(){
  $blazegraph_info = _publication_mod_get_blazegraph_info(array('blazegraph_url'));
  if(!empty($_GET['query']) || isset($_GET['uuid'])){
    // watchdog('publication_mod', '$GET: <pre>%GET</pre>', array('%GET'=>print_r($_GET, TRUE)), WATCHDOG_DEBUG);
    $query = $_GET;
    unset($query['q']);
  }elseif (!empty($_POST['update'])) {
    // watchdog('publication_mod', '$POST: <pre>%POST</pre>', array('%POST'=>print_r($_POST, TRUE)), WATCHDOG_DEBUG);
    $query = $_POST;
  }else{
    return;
  }

  $q = http_build_query($query);

  $options = array(
    'headers' => array(
      'Accept'=>'application/sparql-results+json',
      'content-type'=> 'application/x-www-form-urlencoded'
    ),
    'method' => 'POST',
    'data' => $q
  );

  $result = drupal_http_request($blazegraph_info['blazegraph_url'], $options);
  foreach ($result->headers as $key => $value) {
    header($key . ':' . $value);
  }
  http_response_code($result->code);
  // watchdog('publication_mod', '$result: <pre>%result</pre>', array('%result'=>print_r($result, TRUE)), WATCHDOG_DEBUG);
  echo $result->data;
}

function _publication_mod_get_blazegraph_info($keys){
  $or = db_or();
  // $or->condition('pm_key', 'blazegraph_url');
  // $or->condition('pm_key', 'blazegraph_prefix');
  // $or->condition('pm_key', 'blazegraph_orgs');
  foreach ($keys as $key) {
    $or->condition('pm_key', $key);
  }
  $result = db_select('publication_mod', 'pm')
    ->fields('pm', array('pm_key', 'pm_value'))
    ->condition($or)
    ->execute()
    ->fetchAllKeyed();

  return $result;
}

function _publication_mod_set_blazegraph_info($key, $value){
  db_merge('publication_mod')
  ->key(array('pm_key' => $key))
  ->fields(array(
    'pm_value' => $value
  ))
  ->execute();
}

/**
 * Implements hook_menu_local_tasks_alter
 */
/*function publication_mod_menu_local_tasks_alter(&$data, $router_item, $root_path){
  if (substr($root_path, 0, 5) === 'node/'){
    foreach ($router_item['page_arguments'] as $key => $argument) {
      if (is_object($argument) && array_key_exists('type', $argument) && $argument->type == 'publication_mod_publications') {
        foreach ($data['tabs'][0]['output'] as $key => $value) {
          if (!publication_mod_user_has_role('administrator') && $value['#link']['path'] === 'node/%/edit') {
            unset($data['tabs'][0]['output'][$key]);
          }
        }

        if (publication_mod_user_has_role('authenticated user') && $argument->pub_mod_field_category){
          if($argument->pub_mod_field_blazegraph_uuid){
            $uuid = $argument->pub_mod_field_blazegraph_uuid['und'][0]['value'];
          }else{
            $uuid = $argument->uuid;
          }
          $data['tabs'][0]['output'][] = array(
            '#theme' => 'menu_local_task',
            '#link' => array(
              'title' => t('Edit Publication'),
              'href' => 'publication/edit',
              'access callback' => 'publication_mod_user_has_role',
              'access arguments' => array('authenticated user'),
              'localized_options' => array(
                'query' => array(
                  'uuid' => $uuid,
                  'category' => $argument->pub_mod_field_category['und'][0]['value']
                ),
                'html' => TRUE
              )
            )
          );
        }
        $data['tabs'][0]['count'] = count($data['tabs'][0]['output']);
      }
    }
  }else if($root_path === 'user/%'){
    // watchdog('publication_mod', 'local_tasks: root_path: %root_path <br/> $data: <pre> %data </pre><br/> router_item: <pre> %router_item </pre>', array('%root_path' => $root_path, '%data'=>print_r($data, true), '%router_item' => print_r($router_item, true)), WATCHDOG_DEBUG);
    if(isset($router_item['page_arguments'][0]->pub_mod_field_blazegraph_uuid)){
      $uuid = $router_item['page_arguments'][0]->pub_mod_field_blazegraph_uuid['und'][0]['value'];
      // if(uuid_is_valid($uuid)){
      //   $uuid = "urn:uuid:" . $uuid;
      // }
      $first_name = '';
      if(isset($router_item['page_arguments'][0]->pub_mod_field_first_name['und'][0]['value'])){
        $first_name = $router_item['page_arguments'][0]->pub_mod_field_first_name['und'][0]['value'];
      }else{
        drupal_set_message('Your First Name is not set. Please set it in your account edit page.', 'warning');
        $info_missing = TRUE;
      }

      $data['tabs'][0]['output'][] = array(
        '#theme' => 'menu_local_task',
        '#link' => array(
          'title' => t($first_name .'\'s Publications'),
          'href' => 'publication/search-pub',
          // 'access callback' => 'publication_mod_user_has_role',
          // 'access arguments' => array('authenticated user'),
          'localized_options' => array(
            'query' => array(
              'type' => 'advanced',
              'reviewed' => 'false',
              'authors0' => $uuid,
            ),
            'html' => TRUE
          )
        )
      );
    }
  }
}*/

function _create_publication_page_body($options, $labels){
  global $base_url;

  // $data_properties = $options['data_properties'];
  $contributors = $options['contributors'];

  $html = '<div>';

  $contributors_html = '<div class="col-sm-12">';
  foreach ($contributors as $con_type => $cons) {
    $concat = '<div class="col-sm-3"><h3>'. $labels[$con_type] .'</h3>';
    ksort($cons);
    foreach ($cons as $index => $con) {
      $concat .= '<a target="_blank" data-index="'. $index .'" href="'. $base_url .
        '/publication/search-pub?type=advanced&reviewed=false&authors0='.
        urlencode($con['uri']). '">'. $con['name'] .'</a><br/>'; //TODO add con name
    }

    $concat .= '</div>';
    $contributors_html .= $concat;
  }
  $contributors_html .= '</div>';

  $abstracts = '<div class="col-sm-12">';
  $abstractExists = false;
  $summary = '';
  $restFields = '<div class="col-sm-12"><p>&nbsp;</p><table class="table table-hover">';
  $title = '';
  $tags = '<tr><td>Tags</td></tr>';
  $tagsExist = false;

  $except = array('uuid', 'category', 'delete', 'contributors', 'creationDate', 'modifiedDate');
  
  foreach ($options as $property => $value) {
    if(in_array($property, $except)){
      continue;
    }

    if (strpos($property, 'Title') !== false) {
      switch ($options['category']) {
        case 'Edited_Proceeding':
        case 'Editor':
        case 'Whole_Book':
        case 'Monograph':
          if($property == 'bookTitle'){
            $title = $value;
          }
          break;
        case 'Chapter_In_Book':
          if($property == 'chapterTitle'){
            $title = $value;
          }
          break;
        default:
          if($property == 'englishTitle'){
            $title = $value;
          }
          break;
      }
    }
    switch ($property) {
      case 'englishAbstract':
      case 'greekAbstract':
        $abstractExists = true;
        $abstract = '<div class="col-sm-12"><h3>'. $labels[$property] .'</h3><p>'. $value .'</p></div>';
        $abstracts .= $abstract;
      case 'belongsTo':
        $restFields .= "<tr><td>Lab</td><td>" . implode(', ', $value) . "</td></tr>";
        break;
      case 'project':
        break;
      case 'localLink':
        break;
      case 'tag':
        foreach ($value as $tag) {
          if($tagsExist){
            $tags .= ', ';
          }else{
            $tagsExist = true;
          }
          $tags .= '<a href="'. $base_url .'/publication/search-pub?type=advanced&reviewed=false&tags0=' . $tag .'" target="_blank">'. $tag . '</a>';
        }
        break;
      default:
        $oValue = $value;
        if(filter_var($value, FILTER_VALIDATE_URL)){
          $oValue = '<a href="'. $value . '" target="_blank">' . $value . '</a>';
        }else{
          if($property == 'doi'){
            $oValue = '<a href="https://doi.org/'. $value . '" target="_blank">' . $value . '</a>';
          }
        }
        $restFields .= '<tr><td>' . $labels[$property] . '</td><td>'. $oValue . '</td></tr>';
        break;
    }
  }
  
  $html .= $contributors_html;
  
  $tags .= '</td>';
  if($tagsExist){
    $restFields .= $tags;
  }

  $restFields .= '</table></div>';
  $abstracts .= '</div>';
  if($abstractExists){
    $html .= $abstracts;
  }
  
  $html .= $restFields;

  if(strlen($title)>128){
    $titles = explode(' ', $title);
    $title = '';
    foreach($titles as $t){
      if(strlen($title) < 125 && strlen($title. ' ' . $t) >= 125){
        $title .= '...';
        break;
      }else{
        if(strlen($title)>0){
          $title .= ' ';
        }
        $title .= $t;
      }
    }
  }

  return array(
    'title' => $title,
    'body' => $html,
    'summary' => $summary,
  );
}

function _publication_mod_create_page_body_from_uri($pub_uri){
  global $base_url;
  $blazegraph_info = _publication_mod_get_blazegraph_info(array('blazegraph_url', 'blazegraph_prefix'));
  $dbURL = $blazegraph_info['blazegraph_url'];
  $ontologyPrefix = $blazegraph_info['blazegraph_prefix'];

  // $query = 'prefix press: <'. $ontologyPrefix. '>
  //           select * where{
  //             BIND (<'. $pub_uri .'> as ?pub).
  //             ?pub ?p ?o.
  //             ?p rdf:type owl:DatatypeProperty.
  //             FILTER(?p != press:creationDate && ?p != press:modifiedDate && ?p != press:publicationUuid).
  //             ?p rdfs:label ?plabel.
  //           }';

  $query = 'prefix press: <'. $ontologyPrefix. '>
            select * where{
              BIND (<'. $pub_uri .'> as ?pub).
              ?pub ?p ?o.
              optional{?p rdf:type ?type}.
              FILTER(?p = rdf:type || (?p != press:creationDate && ?p != press:modifiedDate && ?p != press:publicationUuid && ?type = owl:DatatypeProperty)).
              OPTIONAL{?p rdfs:label ?plabel}.
            }';

  $q = http_build_query(array('query' => $query));

  $options = array(
    'headers' => array(
      'Accept'=>'application/sparql-results+json',
      'content-type'=> 'application/x-www-form-urlencoded'),
    'method' => 'POST',
    'data' => $q
  );

  $result = drupal_http_request($dbURL, $options);

  //Get Pub's contributors
  $query = 'prefix press: <'. $ontologyPrefix. '>
          select * where{
            BIND (<'. $pub_uri .'> as ?pub).
            ?pub press:hasContributor ?slot.
            ?slot press:listIndex ?index.
            ?con_type rdfs:subPropertyOf* press:contributorType.
            ?slot ?con_type ?con.
            ?con foaf:givenName ?givenName.
            ?con foaf:familyName ?familyName.
            ?con_type rdfs:label ?con_type_label.
          }';

  $q = http_build_query(array('query' => $query));

  $options = array(
    'headers' => array(
      'Accept'=>'application/sparql-results+json',
      'content-type'=> 'application/x-www-form-urlencoded'),
    'method' => 'POST',
    'data' => $q
  );

  $contributor_results = drupal_http_request($dbURL, $options);
  $contributor_json = json_decode($contributor_results->data);

  //Create Contributor bar
  $html = '<div>';
  $contributors = array();
  foreach($contributor_json->results->bindings as $con){
    if(!array_key_exists($con->con_type_label->value, $contributors)){
      $contributors[$con->con_type_label->value] = array();
    }
    $contributors[$con->con_type_label->value][$con->index->value] = array(
      "name" => $con->givenName->value . ' ' . $con->familyName->value,
      "uri" => $con->con->value
    );
  }
  $contributors_html = '<div class="col-sm-12">';
  foreach($contributors as $con_type=>$cons){
    $concat = '<div class="col-sm-3"><h3>' . $con_type . '</h3>';
    ksort($cons); 
    foreach($cons as $key=>$con){
      $concat .= '<a target="_blank" data-index="'. $key .'" href="'. $base_url . 
        '/publication/search-pub?type=advanced&reviewed=false&authors0='. 
        urlencode($con['uri']) .'">'. $con['name'] . '</a><br/>';
    }

    $concat .= '</div>';
    $contributors_html .= $concat;
  }
  $contributors_html .= '</div>';

  $html .= $contributors_html;

  //Create Abstract if exists & Array of Data properties

  $dataAttributes = json_decode($result->data);
  $abstracts = '<div class="col-sm-12">';
  $abstractExists = false;
  $summary = '';
  $restFields = '<div class="col-sm-12"><p>&nbsp;</p><table class="table table-hover">';
  $title = '';
  $pub_type = '';
  foreach ($dataAttributes->results->bindings as $value) {
    if($value->p->value === 'http://www.w3.org/1999/02/22-rdf-syntax-ns#type'){
      $pub_type = explode("#", $value->o->value)[1];
      break;
    }
  }
  $tags = '<tr><td>Tags</td><td>';
  $tagsExist = false;
  foreach($dataAttributes->results->bindings as $d){
    if($d->p->value == 'http://www.w3.org/1999/02/22-rdf-syntax-ns#type'){
      continue;
    }
    if(strpos($d->plabel->value, 'Abstract') !== false){
      $abstractExists = true;
      $abstract ='<div class="col-sm-12"><h3>'. $d->plabel->value  .'</h3><p>'. $d->o->value . '</p></div>';
      $abstracts .= $abstract;
      
    }elseif ($d->plabel->value == 'Tags') {
      if($tagsExist){
        $tags .= ', ';
      }else{
        $tagsExist = true;
      }
      $tags .= '<a href="/publication/search-pub?type=advanced&reviewed=false&tags0=' . $d->o->value .'" target="_blank">'. $d->o->value . '</a>';
    }
    else{
      $oValue = $d->o->value;
      if(filter_var($d->o->value, FILTER_VALIDATE_URL)){
        $oValue = '<a href="'. $d->o->value . '" target="_blank">' . $d->o->value . '</a>';
      }else{
        if($d->plabel->value == 'doi'){
          $oValue = '<a href="https://doi.org/'. $d->o->value . '" target="_blank">' . $d->o->value . '</a>';
        }
      }
      $restFields .= '<tr><td>' . $d->plabel->value . '</td><td>'. $oValue . '</td></tr>';
    }

    if (strpos($d->plabel->value, 'Title') !== false) {
      $title_type = explode("#", $d->p->value)[1];
      switch ($pub_type) {
        case 'Edited_Proceeding':
        case 'Editor':
        case 'Whole_Book':
        case 'Monograph':
          if($title_type == 'bookTitle'){
            $title = $d->o->value;
          }
          break;
        case 'Chapter_In_Book':
          if($title_type == 'chapterTitle'){
            $title = $d->o->value;
          }
          break;
        default:
          if($title_type == 'englishTitle'){
            $title = $d->o->value;
          }
          break;
      }
    }
  }

  $tags .= '</td>';
  if($tagsExist){
    $restFields .= $tags;
  }

  $restFields .= '</table></div>';
  $abstracts .= '</div>';
  if($abstractExists){
    $html .= $abstracts;
  }

  $html .= $restFields;

  //Max length of Drupal Title is 128
  $length = 0;
  if(strlen($title)>128){
    $titles = explode(' ', $title);
    $title = '';
    foreach($titles as $t){
      if(strlen($title) < 125 && strlen($title. ' ' . $t) >= 125){
        $title .= '...';
        break;
      }else{
        if(strlen($title)>0){
          $title .= ' ';
        }
        $title .= $t;
      }
    }
  }

  return array('title'=>$title, 'html'=>$html, 'summary'=> $summary, 'category'=>$pub_type, 'contributors'=>$contributors);
}

/**
 * Checks if use has one of the roles in arguments
 * @return type
 */
function publication_mod_user_has_role(){
  global $user;
  $roles = func_get_args();
  foreach($roles as $role){
    if (in_array($role, $user->roles)){
      return TRUE;
    }
  }
  return FALSE;
}

/**
 * Returns user information
 * @return string
 */
function _get_user_info_to_json(){
  global $user;

  if (!user_is_anonymous()){
    $info_missing = FALSE;
    $user_data = user_load($user->uid);

    if(isset($user_data->pub_mod_field_organization['und'][0]['option'])){
      $org = $user_data->pub_mod_field_organization['und'][0]['option'];
    }else{
      drupal_set_message('Your Laboratory is not set. Please set it in your account edit page.', 'warning');
      $info_missing = TRUE;
    }
    
    if(isset($user_data->pub_mod_field_first_name['und'][0]['value'])){
      $first_name = $user_data->pub_mod_field_first_name['und'][0]['value'];
    }else{
      drupal_set_message('Your First Name is not set. Please set it in your account edit page.', 'warning');
      $info_missing = TRUE;
    }
    
    if(isset($user_data->pub_mod_field_last_name['und'][0]['value'])){
      $last_name = $user_data->pub_mod_field_last_name['und'][0]['value'];
    }else{
      drupal_set_message('Your Last Name is not set. Please set it in your account edit page.', 'warning');
      $info_missing = TRUE;
    }

    if($info_missing){
      return json_encode(array('anonymous' => TRUE));
    }
    $cu = array(
      'uuid' => $user_data->pub_mod_field_blazegraph_uuid['und'][0]['value'],
      'name' => $first_name . " " . $last_name,
      'mail' => $user_data->mail,
      'lab' => $org,
      'roles' => array_values($user_data->roles)
    );
  }else{
    $cu = array('anonymous' => TRUE);
  }
  return json_encode($cu);
}

/**
 * Returns lab information
 * @return string
 */
function _get_labs_to_json(){
  $labs = '';
  $labs = $labs . "{";
  $blazegraph_info = _publication_mod_get_blazegraph_info(array('blazegraph_orgs'));
  $orgs = array();
  $blazegraph_orgs = explode("\n", $blazegraph_info['blazegraph_orgs']);
  foreach ($blazegraph_orgs as $org) {
    if($org != ""){
      $org_info = explode('|', $org);
      $key = trim($org_info[0]);
      $bg_value = trim($org_info[1]);
      $orgs[$bg_value] = $key;
    }
  }
  foreach($orgs as $key => $value){
    $labs = $labs . "'". $value . "':'" . $key . "',";
  }
  $labs = $labs . "}";

  return $labs;
}

/**
 * Adds to the calling page, the following libraries required by the PRESS Library
 */
function _add_presslib_library($bootstrap = true){
  $module_path = drupal_get_path('module', 'publication_mod');
  global $theme;

  if($theme != 'bootstrap' && $bootstrap){
    drupal_add_js($module_path . '/js/bootstrap.js');
  }

  drupal_add_js($module_path . '/js/typeahead.bundle.js');
  drupal_add_js($module_path . '/js/Sortable.js');
  drupal_add_js($module_path . '/js/moment.min.js');
  drupal_add_js($module_path . '/js/daterangepicker.js');
  drupal_add_js($module_path . '/js/pressfields.js');
  drupal_add_js($module_path . '/js/presslib.js');
  drupal_add_js($module_path . '/js/pressSearch.js');
  drupal_add_js($module_path . '/js/pressExternalAuthors.js');
  drupal_add_js($module_path . '/js/pressInternalAuthors.js');
  drupal_add_js($module_path . '/js/pressMergeAuthors.js');
  drupal_add_js($module_path . '/js/pressEditProjects.js');
  drupal_add_js($module_path . '/js/pressEditTags.js');
  drupal_add_js($module_path . '/js/jquery.twbsPagination.js');
  drupal_add_js($module_path . '/js/pressProjects.js');

  if($theme != 'bootstrap' && $bootstrap){
    drupal_add_css($module_path . "/css/bootstrap.css");
  }
  drupal_add_css($module_path . "/css/presslib.css");
  drupal_add_css($module_path . "/css/typeaheadjs.css");
  drupal_add_css($module_path . "/css/sortable.css");
  drupal_add_css($module_path . "/css/daterangepicker.css");
  drupal_add_css($module_path . "/css/fontello.css");
}

function _publication_mod_create_pub_dom_element($doc, $uuid, $title, $path, $contributors){
  $element = $doc->createElement('div');
  $element->setAttribute('id', $uuid);
  $first = TRUE;
  foreach ($contributors as $type_label => $cons) {
    foreach ($cons as $key => $value) {
      if(!$first){
        $element->appendChild(new DOMText(', '));
      }
      if(gettype($value) === "array"){
        $name = $value['name'];
        $uri = $value['uri'];
      }else{
        $name = $value->name;
        $uri = $value->uri;
      }
      $conElement = $doc->createElement('a', htmlspecialchars($name));
      $conElement->setAttribute('href', '/publication/search-pub?type=advanced' .
                                '&reviewed=false' .
                                '&authors0='. urlencode($uri));
      $conElement->setAttribute('target', '_blank');
      $element->appendChild($conElement);
      $first = FALSE;
    }
  }
  $element->appendChild(new DOMText(': '));
  $titleElement = $doc->createElement('a', htmlspecialchars($title));
  $titleElement->setAttribute('href', '/'. $path);
  $titleElement->setAttribute('target', '_blank');
  $element->appendChild($titleElement);

  return $element;
}

function publication_mod_add_publication($title, $summary, $body, $category, $contributors, $file){
  global $user;

  $values = array(
    'type'=> 'publication_mod_publications',
    'uid' => $user->uid,
    'status' => 1,
    'comment' => 0,
    'promote' => 0
  );

  $entity = entity_create('node', $values);
  $ewrapper = entity_metadata_wrapper('node', $entity);

  $ewrapper->title->set($title);

  $ewrapper->pub_mod_field_category->set($category);

  $ewrapper->body->set(array('value'=> $body, 'format' => 'full_html'));
  if(isset($summary) && !empty($summary) && $summary != ''){
    $ewrapper->body->summary->set($summary);
  }

  $file_path = '';

  if(isset($file['myfile']['tmp_name']) && file_exists($file['myfile']['tmp_name']) && is_uploaded_file($file['myfile']['tmp_name'])){
    $path = $file['myfile']['tmp_name'];
    $filename = $file['myfile']['name'];

    $file_temp = file_get_contents($path);

    $file_temp = file_save_data($file_temp, 'public://publication_mod_publications/' . $filename, FILE_EXISTS_RENAME);

    $entity->field_file = array(
      'und' => array(
        0 => array(
          'fid' => $file_temp->fid,
          'filename' => $file_temp->filename,
          'filemime' => $file_temp->filemime,
          'uid' => $user->uid,
          'uri' => $file_temp->uri,
          'status' => 1,
          'display' => 1
        )
      )
    );

    $file_real_path;
    if($fwrapper = file_stream_wrapper_get_instance_by_uri($file_temp->uri)){
      $file_real_path = $fwrapper->realpath();
      $file_path = str_replace($_SERVER['DOCUMENT_ROOT'].'/','',$file_real_path);
    }
  }
  $ewrapper->save();
  $ewrapper->pub_mod_field_blazegraph_uuid->set("urn:uuid:" . $ewrapper->value()->uuid);
  $ewrapper->save();
  $path = drupal_get_path_alias("node/". $ewrapper->value()->nid, null);

  /*
  // TODO: FIX THIS BELLOW 
  $blazegraph_info = _publication_mod_get_blazegraph_info(array('all_pubs'));
  libxml_use_internal_errors(true);
  $doc = new DOMDocument();

  $doc->loadHTML($blazegraph_info['all_pubs']);
  $div = $doc->getElementById('all_pubs');
  
  $element = _publication_mod_create_pub_dom_element($doc, $uuid, $title, $path, $contributors);
  
  $div->appendChild($element);
  $html = $doc->saveHTML();

  _publication_mod_set_blazegraph_info('all_pubs', $html);
  */
 
  return array(
    'uuid' => "urn:uuid:" . $ewrapper->value()->uuid,
    'path' => $path,
    'file_url' => $file_path
  );
}

function publication_mod_edit_publication($uuid, $title, $summary, $body, $category, $contributors, $file){
  global $user;

  $query = new EntityFieldQuery();
  $query->entityCondition('entity_type', 'node')
    ->entityCondition('bundle', 'publication_mod_publications')
    ->fieldCondition('pub_mod_field_blazegraph_uuid', 'value', $uuid, '=');
  
  $result = $query->execute();
  if (!isset($result['node']) || count($result['node']) == 0){
    //TODO Create node
  }

  $ids = array_keys($result['node']);
  $entity = node_load($ids[0]);

  $ewrapper = entity_metadata_wrapper('node', $entity);
  $ewrapper->title->set($title);
  $ewrapper->body->set(array('value'=>$body, 'format'=>'full_html'));
  $ewrapper->body->summary->set($summary);

  $ewrapper->pub_mod_field_category->set($category);
  $file_temp;
  if(isset($file['myfile']['tmp_name']) && file_exists($file['myfile']['tmp_name']) && is_uploaded_file($file['myfile']['tmp_name'])){
    $path = $file['myfile']['tmp_name'];
    $filename = $file['myfile']['name'];

    $file_temp = file_get_contents($path);

    $file_temp = file_save_data($file_temp, 'public://publication_mod_publications/' . $filename, FILE_EXISTS_RENAME);

    $entity->field_file = array(
      'und' => array(
        0 => array(
          'fid' => $file_temp->fid,
          'filename' => $file_temp->filename,
          'filemime' => $file_temp->filemime,
          'uid' => $user->uid,
          'uri' => $file_temp->uri,
          'status' => 1,
          'display' => 1
        )
      )
    );

  }
  $file_real_path;
  $file_path = '';
  if(isset($file_temp) && $fwrapper = file_stream_wrapper_get_instance_by_uri($file_temp->uri)){
    $file_real_path = $fwrapper->realpath();
    $file_path = str_replace($_SERVER['DOCUMENT_ROOT'].'/','',$file_real_path);
  }
  entity_get_controller('node')->resetCache(array(entity_id('node', $entity)));
  field_attach_update('node', $entity);

  $ewrapper->save();

  $path = drupal_get_path_alias("node/". $ewrapper->value()->nid, null);
  /*
  $blazegraph_info = _publication_mod_get_blazegraph_info(array('all_pubs'));
  libxml_use_internal_errors(true);
  $doc = new DOMDocument();

  $doc->loadHTML($blazegraph_info['all_pubs']);
  $div = $doc->getElementById('all_pubs');
  $element = _publication_mod_create_pub_dom_element($doc, $uuid, $title, $path, $contributors);
  $pub_div = $doc->getElementById($uuid);
  
  if($pub_div && $pub_div->parentNode){
    $pub_div->parentNode->removeChild($pub_div);
  }
  $div->appendChild($element);
  $html = $doc->saveHTML();
  _publication_mod_set_blazegraph_info('all_pubs', $html);
*/
  return array(
    'uuid' => $uuid,
    'path' => $path,
    'file_url' => $file_path
  );
}

/*
 * Handles the new publication addition.
 */
function publication_mod_ajax_callback($title='', $category='', $body='', $summary='', $uuid='', $contributors=array()){
  global $user;
  $function_called = true;
  if(empty($title) && empty($category) && empty($body)){
    $title = $_POST['title'];
    $category = $_POST['category'];
    $body = $_POST['body'];
    $summary = $_POST['summary'];
    $contributors = json_decode($_POST['contributors']);
    $function_called = false;
  }
  // $values = explode("&", $value);
  // print_r($values);
  // $vals;
  // $i=0;
  // foreach($values as $val){
  //   $vals[$i++] = explode("=", $val);
  // }
  // print_r($vals);
  // echo "<br />";
  // print_r($_POST);
  // echo "<br />";
  // print_r($_FILES);
  // return;

  // entity_create replaces the procedural steps in the first example of
  // creating a new object $node and setting its 'type' and uid property
  $values = array(
    'type' => 'publication_mod_publications',
    'uid' => $user->uid,
    'status' => 1,
    'comment' => 0,
    'promote' => 1,
  );
  $entity = entity_create('node', $values);

  // The entity is now created, but we have not yet simplified use of it.
  // Now create an entity_metadata_wrapper around the new node entity
  // to make getting and setting values easier
  $ewrapper = entity_metadata_wrapper('node', $entity);

  // Using the wrapper, we do not have to worry about telling Drupal
  // what language we are using. The Entity API handles that for us.
  // $ewrapper->format->set('ace_editor');

  $ewrapper->title->set($title);

  $ewrapper->pub_mod_field_category->set($category);

  // Setting the body is a bit different from other properties or fields
  // because the body can have both its complete value and its
  // summary
  $my_body_content = $body;
  $ewrapper->body->set(array('value' => $my_body_content, 'format' => 'full_html'));
  if(isset($summary)){
    $ewrapper->body->summary->set($summary);
  }

  // Setting the value of an entity reference field only requires passing
  // the entity id (e.g., nid) of the entity to which you want to refer
  // The nid 15 here is just an example.
  // $ref_nid = 15;
  // Note that the entity id (e.g., nid) must be passed as an integer not a
  // string
  // $ewrapper->field_my_entity_ref->set(intval($ref_nid));

  // Now just save the wrapper and the entity
  // There is some suggestion that the 'true' argument is necessary to
  // the entity save method to circumvent a bug in Entity API. If there is
  // such a bug, it almost certainly will get fixed, so make sure to check.
  $file_path = "";
  if (array_key_exists("myfile", $_FILES) && file_exists($_FILES['myfile']['tmp_name']) && is_uploaded_file($_FILES['myfile']['tmp_name'])){
    $path = $_FILES['myfile']['tmp_name'];
    $filename = $_FILES['myfile']['name'];

    $file_temp = file_get_contents($path);

    $file_temp = file_save_data($file_temp, 'public://publication_mod_publications/' . $filename, FILE_EXISTS_RENAME);

    $entity->field_file = array(
      'und' => array(
          0 => array(
            'fid' => $file_temp->fid,
            'filename' => $file_temp->filename,
            'filemime' => $file_temp->filemime,
            'uid' => $user->uid,
            'uri' => $file_temp->uri,
            'status' => 1,
            'display' => 1
          )
        )
      );
    $file_real_path;
    if($fwrapper = file_stream_wrapper_get_instance_by_uri($file_temp->uri)){
      $file_real_path = $fwrapper->realpath();
      $file_path = str_replace($_SERVER['DOCUMENT_ROOT'].'/','',$file_real_path);
    }
  }
  $ewrapper->save();
  header('Content-Type: application/json');
  if(isset($uuid) && !empty($uuid)){
    $ewrapper->pub_mod_field_blazegraph_uuid->set($uuid);
  }else{
    $ewrapper->pub_mod_field_blazegraph_uuid->set("urn:uuid:" . $ewrapper->value()->uuid);
  }
  $ewrapper->save();
  if(!isset($uuid) || empty($uuid)){
    $uuid = "urn:uuid:" . $ewrapper->value()->uuid;
  }
  $path = drupal_get_path_alias("node/" . $ewrapper->value()->nid, null);
  $result = array(
    'uuid' => $uuid,
    'path' => $path,
    'file_url' => $file_path
  );

  $blazegraph_info = _publication_mod_get_blazegraph_info(array('all_pubs'));
  libxml_use_internal_errors(true);
  $doc = new DOMDocument();

  $doc->loadHTML($blazegraph_info['all_pubs']);
  $div = $doc->getElementById('all_pubs');
  
  $element = _publication_mod_create_pub_dom_element($doc, $uuid, $title, $path, $contributors);
  
  $div->appendChild($element);
  $html = $doc->saveHTML();

  _publication_mod_set_blazegraph_info('all_pubs', $html);


  if($function_called){
    return $result;
  }
  echo json_encode($result, true);
  return;
  // echo $ewrapper->value()->uuid;
  // echo '<br/>';
  // echo drupal_get_path_alias("node/" . $ewrapper->value()->nid, null);
}

function publication_mod_update_pubs($blazegraph_uris = array()){
  if(empty($blazegraph_uris)){
    if(!in_array('blazegraph_uris', $_POST))
      return;
    $blazegraph_uris = $_POST['blazegraph_uris'];
    $function_called = false;
  }

  $query = new EntityFieldQuery();
  $query->entityCondition('entity_type', 'node')
    ->entityCondition('bundle', 'publication_mod_publications')
    ->fieldCondition('pub_mod_field_blazegraph_uuid', 'value', $blazegraph_uris, 'IN');

  $result = $query->execute();

  if (isset($result['node'])){
    $ids = array_keys($result['node']);
  }else{
    return;
  }

  foreach($ids as $id){
    $entity = node_load($id);
    $pub_page = _publication_mod_create_page_body_from_uri($entity->pub_mod_field_blazegraph_uuid['und'][0]['value']);

    $entity->title= $pub_page['title'];
    $entity->body['und'][0]['value'] = $pub_page['html'];
    $entity->body['und'][0]['summary'] = $pub_page['summary'];
    $entity->pub_mod_field_category['und'][0]['value'] = $pub_page['category'];
    node_save($entity);
  }
  http_response_code(200);
  return;
}

function publication_mod_ajax_callback_edit_pub(){
  global $user;
  $uuid = $_POST['uuid'];
  $delete = false;
  if (array_key_exists("delete", $_POST)){
    if ($_POST['delete'] === 'true'){
      $delete = true;
    }
  }

  if ($delete === false){
    $body_content = $_POST['body'];
    $title = $_POST['title'];
    $summary = $_POST['summary'];
    $category = $_POST['category'];
  }

  $file_path = '';

  $ewrappers;
  $entity = null;

  $query = new EntityFieldQuery();
  $query->entityCondition('entity_type', 'node')
    ->entityCondition('bundle', 'publication_mod_publications')
    ->fieldCondition('pub_mod_field_blazegraph_uuid', 'value', $uuid, '=');

  $result = $query->execute();
  $new_entity = false;
  if (isset($result['node']) && count($result['node']) == 1){
    $ids = array_keys($result['node']);
    $entity = node_load($ids[0]);
  }else{
    $values = array(
      'type' => 'publication_mod_publications',
      'uid' => $user->uid,
      'status' => 1,
      'comment' => 0,
      'promote' => 1,
    );
    $entity = entity_create('node', $values);
    $new_entity = true;
  }
  if ($delete === true){
    if ($entity){
      node_delete($entity->nid);
    }
    $blazegraph_info = _publication_mod_get_blazegraph_info(array('all_pubs'));
    libxml_use_internal_errors(true);
    $doc = new DOMDocument();

    $doc->loadHTML($blazegraph_info['all_pubs']);
    $div = $doc->getElementById('all_pubs');
    $pub_div = $doc->getElementById($uuid);
    
    if($pub_div && $pub_div->parentNode){
      $pub_div->parentNode->removeChild($pub_div);
    }
    $html = $doc->saveHTML();
    _publication_mod_set_blazegraph_info('all_pubs', $html);

    echo '{"result": "success"}';
    exit();
  }
  
  $ewrapper = entity_metadata_wrapper('node', $entity);
  $contributors = json_decode($_POST['contributors']);

  $ewrapper->title->set($title);

  $ewrapper->body->set(array('value' => $body_content, 'format' => 'full_html'));

  if(isset($summary)){
    $ewrapper->body->summary->set($summary);
  }

  $ewrapper->pub_mod_field_category->set($category);

  if($new_entity){
    $ewrapper->pub_mod_field_blazegraph_uuid->set($uuid);
  }

  if (array_key_exists("myfile", $_FILES) &&    //If file exists, update it
      file_exists($_FILES['myfile']['tmp_name']) &&   //TODO does it delete it?
      is_uploaded_file($_FILES['myfile']['tmp_name'])){

    $path = $_FILES['myfile']['tmp_name'];
    $filename = $_FILES['myfile']['name'];

    $file_temp = file_get_contents($path);

    $file_temp = file_save_data($file_temp, 'public://publication_mod_publications/' . $filename, FILE_EXISTS_RENAME);

    $entity->field_file = array(
      'und' => array(
          0 => array(
            'fid' => $file_temp->fid,
            'filename' => $file_temp->filename,
            'filemime' => $file_temp->filemime,
            'uid' => $user->uid,
            'uri' => $file_temp->uri,
            'status' => 1,
            'display' => 1
          )
        )
      );
  }
  // print_r($ewrapper->field_file->raw());
  $file_real_path;
  if(isset($entity->field_file) && $fwrapper = file_stream_wrapper_get_instance_by_uri($entity->field_file['und'][0]['uri'])){
    $file_real_path = $fwrapper->realpath();
    $file_path = str_replace($_SERVER['DOCUMENT_ROOT'].'/','',$file_real_path);
  }
  entity_get_controller('node')->resetCache(array(entity_id('node', $entity)));
  if(!$new_entity){
    field_attach_update('node', $entity);
  }

  // node_save($entity);
  $ewrapper->save();

  header('Content-Type: application/json');
  
  // $uuid = $entity->uuid;
  $path = drupal_get_path_alias("node/" . $entity->nid, null);
  $result = array(
    'uuid' => $uuid,
    'path' => $path,
    'file_url' => $file_path
  );

  $blazegraph_info = _publication_mod_get_blazegraph_info(array('all_pubs'));
  libxml_use_internal_errors(true);
  $doc = new DOMDocument();

  $doc->loadHTML($blazegraph_info['all_pubs']);
  $div = $doc->getElementById('all_pubs');
  $element = _publication_mod_create_pub_dom_element($doc, $uuid, $title, $path, $contributors);
  $pub_div = $doc->getElementById($uuid);
  
  if($pub_div && $pub_div->parentNode){
    $pub_div->parentNode->removeChild($pub_div);
  }
  $div->appendChild($element);
  $html = $doc->saveHTML();
  _publication_mod_set_blazegraph_info('all_pubs', $html);
  
  echo json_encode($result, true);
  exit();
}

/**
 * Returns the path alias by uuid.
 */
function publication_mod_ajax_callback_get_path(){
  $uuid = $_GET['uuid'];

  $ewrappers = entity_uuid_load('node', array($uuid));
  $result = array();
  $i = 0;
  foreach($ewrappers as $key => $entity){
    $result[$uuid] = array(
      'uuid' => $uuid,
      'path' => drupal_get_path_alias("node/" . $entity->nid, null)
    );
  }

  echo json_encode($result, true);
  exit();
}


/**
 * Implements hook_user_presave
 */
function publication_mod_user_presave(&$edit, $account, $category){
  $add_again_to_blzg = false;
  $delete_from_blzg = false;
  if($account->pub_mod_field_add_to_blzg['und'][0]['value'] == 0){  // Was 0
    if($edit['pub_mod_field_add_to_blzg']['und'][0]['value'] == 0){  //Stays 0, do nothing with BLZG.
      return;
    }else{  // Becomes 1
      $add_again_to_blzg = true;
    }
  }else{  // Was 1
    if($edit['pub_mod_field_add_to_blzg']['und'][0]['value'] == 0){ // Becomes 0
      // TODO: Delete from BLZG?
      $delete_from_blzg = true;
    }// else, Was 1, Becomes 1, continue with edit.
  }

  $blazegraph_info = _publication_mod_get_blazegraph_info(array('blazegraph_prefix', 'blazegraph_url', 'blazegraph_orgs'));
  
  // watchdog("publication_mod_user_presave", "edit: <pre>%edit</pre><br/> account: <pre>%account</pre><br/> category: <pre>%category</pre><br/>", array(
  //   '%edit' => print_r($edit, true),
  //   '%account' => print_r($account, true),
  //   '%category' => print_r($category, true),
  // ), WATCHDOG_NOTICE);

  $orgs = explode("\n", $blazegraph_info['blazegraph_orgs']);
  $orgoptions = array();
  foreach ($orgs as $org) {
    if($org != ""){
      $org_info = explode('|', $org);
      $key = trim($org_info[0]);
      $bg_value = trim($org_info[1]);
      $accepted_values = array_map('trim', explode(",", trim($org_info[2], " \t\n\r\0\x0B[]")));
      $orgoptions[$key] = $bg_value;
    }
  }

  $prefix = $blazegraph_info['blazegraph_prefix'];
  $blazegraph_url = $blazegraph_info['blazegraph_url'];

  if($account->is_new){
    $sparql = 'prefix press:<'. $prefix .'> '.
    'select * where { '.
      '?person press:username "'. $edit['name'] . '". '.
      '?person ?p ?o. '.
    '}';

    $q = http_build_query(array('query' => $sparql));

    $options = array(
      'headers' => array(
        'Accept'=>'application/sparql-results+json',
        'content-type'=> 'application/x-www-form-urlencoded'),
      'method' => 'POST',
      'data' => $q
    );

    $result = drupal_http_request($blazegraph_url, $options);
    $person_results = json_decode($result->data);

    //User is found in blazegraph
    if(count($person_results->results->bindings) > 0){
      $person = $person_results->results->bindings[0]->person->value;
      $edit_changes = array();
      $duplicate = FALSE;
      $notfound = '';

      foreach ($person_results->results->bindings as $key => $value) {
        if($value->person->value != $person){
          $duplicate = TRUE;
          break;
        }
        switch ($value->p->value) {
          case $prefix . 'memberOf':
            $orgPrefixCount = strlen($prefix . 'Organization/');
            $org = substr($value->o->value, $orgPrefixCount);
            $edit_changes['pub_mod_field_organization']['und'][0]['option'] = $org;
            break;
          case 'http://xmlns.com/foaf/0.1/familyName':
            $edit_changes['pub_mod_field_last_name']['und'][0]['value'] = $value->o->value;
            $last_name = $value->o->value;
            break;
          case 'http://xmlns.com/foaf/0.1/givenName':
            $edit_changes['pub_mod_field_first_name']['und'][0]['value'] = $value->o->value;
            $first_name = $value->o->value;
            break;
          default:
            // $notfound .= $value->p->value. ' not found <br/>';
            break;
        }
      }
      if($duplicate){

        // $edit['pub_mod_field_blazegraph_uuid']['und'][0]['value'] = 'urn:uuid:' . $account->uuid;
        watchdog("publication_mod", "Duplicate Username in Blazegraph: %username", array(
          '%username' => $edit['name'],
        ), WATCHDOG_ERROR);

      }else{
        $uuid = $person;
        $edit['pub_mod_field_blazegraph_uuid']['und'][0]['value'] = $person;
        $edit['pub_mod_field_organization'] = $edit_changes['pub_mod_field_organization'];
        $edit['pub_mod_field_first_name'] = $edit_changes['pub_mod_field_first_name'];
        $edit['pub_mod_field_last_name'] = $edit_changes['pub_mod_field_last_name'];
        watchdog("publication_mod", "New User %username <br/> result: <pre>%result</pre><br/> not_found: ". $notfound ."<br/>edit_changes: <pre>%edit_changes</pre><br/>", array(
          '%edit_changes' => print_r($edit_changes, true),
          '%username' => $edit['name'],
          '%result' => print_r($result, true),
        ), WATCHDOG_NOTICE);
      }
    }else{  //User is not found in blazegraph
      // $uuid = 'urn:uuid:' . $account->uuid;
      // $edit['pub_mod_field_blazegraph_uuid']['und'][0]['value'] = $uuid;

      // $sparql = "prefix foaf: <http://xmlns.com/foaf/0.1/>".
      //   "prefix press:<". $prefix . ">".
      //   "INSERT DATA{".
      //     "<". $uuid ."> rdf:type foaf:Person. ".
      //     "<". $uuid."> press:personUuid \u0022urn:uuid:". $uuid ."\u0022. " .
      //     "<". $uuid."> foaf:familyName \u0022". $account->pub_mod_field_last_name['und'][0]['value'] ."\u0022. " .
      //     "<". $uuid."> foaf:givenName \u0022" . $account->pub_mod_field_first_name['und'][0]['value'] ."\u0022. ".
      //     "<". $uuid."> <". $prefix ."personGroup> \u0022FORTH_ICS_Author\u0022. ".
      //     "<". $uuid."> foaf:mbox \u0022mailto:". $account->mail . "\u0022. ";

      //   if(isset($org) && !empty($org)){
      //     $sparql .= "<". $uuid."> <". $prefix ."memberOf> <". $prefix . "Organization/" . $account->pub_mod_field_organization['und'][0]['option'] .">. ";
      //   }

      //   $sparql .= "}";

      //   $q = http_build_query(array('update' => $sparql));

      //   $options = array(
      //     'headers' => array(
      //       'Accept'=>'html',
      //       'content-type'=> 'application/x-www-form-urlencoded'),
      //     'method' => 'POST',
      //     'data' => $q
      //   );

      //   $result = drupal_http_request($blazegraph_url, $options);
      //   watchdog("Blazegraph Person Insert", print_r($result, true), array(), WATCHDOG_NOTICE);
    }
  }else{ //Account update, not new
    $needs_update = FALSE;
    if(isset($edit['pub_mod_field_blazegraph_uuid']['und'][0]['value']) &&
      !empty($edit['pub_mod_field_blazegraph_uuid']['und'][0]['value'])){
      $uuid = $edit['pub_mod_field_blazegraph_uuid']['und'][0]['value'];
      $needs_update = TRUE;
    }elseif(isset($account->pub_mod_field_blazegraph_uuid['und'][0]['value']) && 
      !empty($account->pub_mod_field_blazegraph_uuid['und'][0]['value'])){
      $uuid = $account->pub_mod_field_blazegraph_uuid['und'][0]['value'];
    }else{
      $uuid = 'urn:uuid:' . $account->uuid;
      $edit['pub_mod_field_blazegraph_uuid']['und'][0]['value'] = $uuid;
    }

    if(isset($edit['pub_mod_field_last_name']['und'][0]['value']) &&
      !empty($edit['pub_mod_field_last_name']['und'][0]['value'])){

      $last_name = $edit['pub_mod_field_last_name']['und'][0]['value'];
      $needs_update = TRUE;
    }elseif (isset($account->pub_mod_field_last_name['und'][0]['value']) &&
      !empty($account->pub_mod_field_last_name['und'][0]['value'])) {
    
      $last_name = $account->pub_mod_field_last_name['und'][0]['value'];
    }
    
    if(isset($edit['pub_mod_field_first_name']['und'][0]['value']) &&
        !empty($edit['pub_mod_field_first_name']['und'][0]['value'])){
      $first_name = $edit['pub_mod_field_first_name']['und'][0]['value'];
      $needs_update = TRUE;
    }elseif(isset($account->pub_mod_field_first_name['und'][0]['value']) &&
        !empty($account->pub_mod_field_first_name['und'][0]['value'])){
      $first_name = $account->pub_mod_field_first_name['und'][0]['value'];
    }
    
    if(isset($edit['mail']) && !empty($edit['mail'])){
      $mail = $edit['mail'];
      $needs_update = TRUE;
    }elseif(isset($account->mail) && !empty($account->mail)){
      $mail = $account->mail;
    }

    if(isset($edit['pub_mod_field_organization']['und'][0]['option']) &&
        !empty($edit['pub_mod_field_organization']['und'][0]['option'])){
      $org = $edit['pub_mod_field_organization']['und'][0]['option'];
      $needs_update = TRUE;
    }elseif(isset($account->pub_mod_field_organization['und'][0]['option']) &&
        !empty($account->pub_mod_field_organization['und'][0]['option'])){
      $org = $account->pub_mod_field_organization['und'][0]['option'];
    }

    if($needs_update || $delete_from_blzg){
      $result_affected_pubs;

      if($delete_from_blzg){
        $sparql_getaffected = "prefix foaf: <http://xmlns.com/foaf/0.1/> ".
          "prefix press:<". $prefix . "> ".
          "SELECT distinct ?pub WHERE{ ".
          "<". $uuid."> rdf:type foaf:Person. " .
          "?slot ?c <". $uuid.">. ".
          "?slot rdf:type press:Contributor_Slot. ".
          "?pub press:hasContributor ?slot. }";

          $q_getaffected = http_build_query(array('query' => $sparql_getaffected));

          $options = array(
            'headers' => array(
              'Accept'=>'application/sparql-results+json',
              'content-type'=> 'application/x-www-form-urlencoded'),
            'method' => 'POST',
            'data' => $q_getaffected
          );

          $result_affected_pubs = drupal_http_request($blazegraph_url, $options);
      }

      $sparql = "prefix foaf: <http://xmlns.com/foaf/0.1/>".
      "prefix press:<". $prefix . ">".
      "DELETE {".
        "<". $uuid."> rdf:type foaf:Person. " .
        "<". $uuid . "> foaf:familyName ?familyName. ".
        "<". $uuid . "> foaf:givenName ?givenName. ".
        "<". $uuid . "> foaf:mbox ?mbox. ".
        "<". $uuid . "> press:username ?username.".
        "<". $uuid . "> press:personGroup ?group. ";

      if($delete_from_blzg){
        $sparql .= "?slot ?sp ?so. ".
          "?pub ?hasCon ?slot. ";
      }

      if(isset($org) && !empty($org)){
        $sparql .= "<". $uuid . "> press:memberOf ?org.";
      }
      if(!$delete_from_blzg){
        $sparql .= "}INSERT{".
          "<". $uuid."> rdf:type foaf:Person. " .
          "<". $uuid."> foaf:familyName \u0022". $last_name ."\u0022. " .
          "<". $uuid."> foaf:givenName \u0022" . $first_name ."\u0022. ".
          "<". $uuid."> foaf:mbox \u0022mailto:". $mail . "\u0022. ".
          "<". $uuid."> <". $prefix ."username> \u0022". $edit['name'] . "\u0022. ".
          "<". $uuid."> <". $prefix ."personGroup> \u0022FORTH_ICS_Author\u0022. ";

        if(isset($org) && !empty($org)){
          $sparql .= "<". $uuid."> <". $prefix ."memberOf> <". $prefix . "Organization/" .$org .">. ";
        }
      }

      $sparql .= "} WHERE { ";

      if($add_again_to_blzg){
        $sparql .= "OPTIONAL{";
      }
       $sparql .= "<". $uuid."> rdf:type foaf:Person;".
        "foaf:familyName ?familyName;".
        "foaf:givenName ?givenName; ".
        "press:personGroup ?group. ". 
        "OPTIONAL{<". $uuid."> foaf:mbox ?mbox.}. ".
        "OPTIONAL{<". $uuid."> press:username ?username.}. ".
        "OPTIONAL{<". $uuid."> press:memberOf ?org.}";

      if($delete_from_blzg){
        $sparql .= "OPTIONAL{ ?slot ?p <". $uuid.">. ".
          "?slot rdf:type press:Contributor_Slot .".
          "?slot ?sp ?so. ".
          "?pub ?hasCon ?slot. }";
      }

      if($add_again_to_blzg){
        $sparql .= "}";
      }
      $sparql .= "}";

      $q = http_build_query(array('update' => $sparql));

      $options = array(
        'headers' => array(
          'Accept'=>'html',
          'content-type'=> 'application/x-www-form-urlencoded'),
        'method' => 'POST',
        'data' => $q
      );

      $result = drupal_http_request($blazegraph_url, $options);

      if($delete_from_blzg){
        $affected_pub_results = json_decode($result_affected_pubs->data);
        $affected_pubs = array();

        foreach ($affected_pub_results->results->bindings as $key => $value) {
          $affected_pubs[] = $value->pub->value;
        }
        publication_mod_update_pubs($affected_pubs);
      }
      watchdog("Blazegraph Person Update", print_r($result, true), array(), WATCHDOG_NOTICE);
    }
  }
}

/**
 * Implements hook_user_cancel
 */
function publication_mod_user_cancel($edit, $account, $method){
  watchdog('publication_mod', '$edit <pre>%edit</pre><br/>$account <pre>%account</pre><br/>$method <pre>%method</pre>',
    array(
      '%edit' => print_r($edit, true),
      '%account' => print_r($account, true),
      '%method' => print_r($method, true),
    ), WATCHDOG_DEBUG);
}

/**
 * Implements hook_user_insert
 */
function publication_mod_user_insert(&$edit, $account, $category){

  if($edit['pub_mod_field_add_to_blzg']['und'][0]['value'] == 0){
    return;
  }

  $blazegraph_info = _publication_mod_get_blazegraph_info(array('blazegraph_prefix', 'blazegraph_url', 'blazegraph_orgs'));

  // watchdog("publication_mod_user_insert", "edit: <pre>%edit</pre><br/> account: <pre>%account</pre><br/> category: <pre>%category</pre><br/>", array(
  //   '%edit' => print_r($edit, true),
  //   '%account' => print_r($account, true),
  //   '%category' => print_r($category, true),
  // ), WATCHDOG_NOTICE);


  $orgs = explode("\n", $blazegraph_info['blazegraph_orgs']);
  $orgoptions = array();
  foreach ($orgs as $org) {
    if($org != ""){
      $org_info = explode('|', $org);
      $key = trim($org_info[0]);
      $bg_value = trim($org_info[1]);
      $accepted_values = array_map('trim', explode(",", trim($org_info[2], " \t\n\r\0\x0B[]")));
      $orgoptions[$key] = $bg_value;
    }
  }

  $prefix = $blazegraph_info['blazegraph_prefix'];
  $blazegraph_url = $blazegraph_info['blazegraph_url'];

  if(isset($edit['pub_mod_field_blazegraph_uuid']['und'][0]['value']) &&
    !empty($edit['pub_mod_field_blazegraph_uuid']['und'][0]['value'])){
    $uuid = $edit['pub_mod_field_blazegraph_uuid']['und'][0]['value'];
  }else{
    $uuid = 'urn:uuid:' . $account->uuid;
    //$edit['pub_mod_field_blazegraph_uuid']['und'][0]['value'] = $uuid;
    //user_save($account, $edit);
    $edit_update = array(
      'pub_mod_field_blazegraph_uuid' => array(
        'und' => array(
          0 => array(
            'value' => $uuid
          )
        )
      )
    );
    $acc = user_load($account->uid);
    user_save($acc, $edit_update);
  }
  $first_name = $edit['pub_mod_field_first_name']['und'][0]['value'];
  $last_name = $edit['pub_mod_field_last_name']['und'][0]['value'];
  $org = $edit['pub_mod_field_organization']['und'][0]['option'];

  $sparql = "prefix foaf: <http://xmlns.com/foaf/0.1/>".
  "prefix press:<". $prefix . ">".
  "DELETE {".
    "<". $uuid . "> foaf:familyName ?familyName. ".
    "<". $uuid . "> foaf:givenName ?givenName. ".
    "<". $uuid."> press:personGroup ?group. ".
    "<". $uuid."> press:username ?username. ".
    "<". $uuid . "> foaf:mbox ?mbox.".
    "<". $uuid . "> press:memberOf ?org.";

  $sparql .= "}INSERT{".
    "<". $uuid."> foaf:familyName \u0022". $last_name ."\u0022. " .
    "<". $uuid."> foaf:givenName \u0022" . $first_name ."\u0022. ".
    "<". $uuid."> <". $prefix ."personGroup> \u0022FORTH_ICS_Author\u0022. ".
    "<". $uuid."> foaf:mbox \u0022mailto:". $account->mail . "\u0022. ".
    "<". $uuid."> <". $prefix ."username> \u0022". $edit['name'] . "\u0022. ";
  if(isset($org) && !empty($org)){
    $sparql .= "<". $uuid."> <". $prefix ."memberOf> <". $prefix . "Organization/" .$org .">. ";
  }

  $sparql .= "} WHERE {".
    "OPTIONAL{<". $uuid."> rdf:type foaf:Person;".
    // "press:personUuid \u0022". $uuid . "\u0022"
    "foaf:familyName ?familyName;".
    "foaf:givenName ?givenName.".
    "<". $uuid."> press:personGroup ?group. ".
    "OPTIONAL{<". $uuid."> press:username ?username.}".
    "OPTIONAL{<". $uuid."> foaf:mbox ?mbox.}".
    "OPTIONAL{<". $uuid."> press:memberOf ?org.}}".
    "}";

  $q = http_build_query(array('update' => $sparql));

  $options = array(
    'headers' => array(
      'Accept'=>'html',
      'content-type'=> 'application/x-www-form-urlencoded'),
    'method' => 'POST',
    'data' => $q
  );

  $result = drupal_http_request($blazegraph_url, $options);   
  watchdog("Blazegraph New User Insert", print_r($result, true), array(), WATCHDOG_NOTICE);
}


function publication_mod_get_pub_count_per_lab($lab = '*', $category = '*') {
  $blazegraph_info = _publication_mod_get_blazegraph_info(array('blazegraph_prefix', 'blazegraph_url', 'blazegraph_orgs'));

  if ($lab == '*'){
    $lab_sparql = '?pub press:belongsTo ?lab. ' ;
  }else {
    $lab_sparql = '?pub press:belongsTo org:' . $lab .'. ';
    $lab_sparql .= 'BIND(org:' . $lab . ' AS ?lab) .';
  }

  if($category == '*') {
    $cat_sparql = 'Publication';
  }else {
    $cat_sparql = $category;
  }

  $sparql = "prefix press:<". $blazegraph_info['blazegraph_prefix'] . ">";
  $sparql .= "prefix org:<". $blazegraph_info['blazegraph_prefix'] . "Organization/>";

  $sparql .= 'SELECT (strafter(str(?low), "#") AS ?lowid) ?lowlabel (strafter(str(?lab), "Organization/") AS ?labID) ?optgroup ?pubCounter(strafter(str(?superclass), "#") AS ?superclassid) ?superlabel WHERE { ' .
    '{ '.
      'SELECT (COUNT(?pub) as ?pubCounter) ?low ?lab WHERE { ' .
        '?low rdfs:subClassOf* press:'. $cat_sparql .'. ' .
        'OPTIONAL { '. 
        '?pub rdf:type [rdfs:subClassOf* ?low]. '.
        $lab_sparql .
        '}. ' .
      '} GROUP BY ?low ?lab ' .
    '} ' .
    'OPTIONAL {?low rdfs:label ?lowlabel}. ' .
    'OPTIONAL {?low press:optgroup ?optgroup}. ' .
    'OPTIONAL {?low rdfs:subClassOf ?superclass}. ' .
  '}';

  $q = http_build_query(array('query' => $sparql));

  $options = array(
    'headers' => array(
      'Accept'=>'application/sparql-results+json',
      'content-type'=> 'application/x-www-form-urlencoded'),
    'method' => 'POST',
    'data' => $q
  );

  $result = drupal_http_request($blazegraph_info['blazegraph_url'], $options);   
  $num_json = json_decode($result->data);
  $result_array = array();
  foreach($num_json->results->bindings as $cat){
    if(isset($cat->labID)){
      if(!isset($result_array[$cat->labID->value])){
        $result_array[$cat->labID->value] = array();
      }
      $result_array[$cat->labID->value][$cat->lowid->value] = $cat->pubCounter->value;
    }
  }

  // watchdog("publication_mod get_pub_count_per_lab", '<pre>%array</pre>' , 
  //   array(
  //     '%array' => print_r($result_array, true),
  //   ), WATCHDOG_NOTICE);

  return $result_array;
}

function publication_mod_get_pub_count($category = '*') {
  $blazegraph_info = _publication_mod_get_blazegraph_info(array('blazegraph_prefix', 'blazegraph_url', 'blazegraph_orgs'));

  if($category == '*') {
    $cat_sparql = 'Publication';
  }else {
    $cat_sparql = $category;
  }

  $sparql = "prefix press:<". $blazegraph_info['blazegraph_prefix'] . "> ";

  $sparql .= 'SELECT (strafter(str(?low), "#") AS ?lowid) ?lowlabel ?optgroup ?pubCounter(strafter(str(?superclass), "#") AS ?superclassid) ?superlabel WHERE { ' .
    '{ '.
      'SELECT (COUNT(?pub) as ?pubCounter) ?low WHERE { ' .
        '?low rdfs:subClassOf* press:'. $cat_sparql .'. ' .
        'OPTIONAL { '. 
        '?pub rdf:type [rdfs:subClassOf* ?low]. '.
        '}. ' .
      '} GROUP BY ?low ' .
    '} ' .
    'OPTIONAL {?low rdfs:label ?lowlabel}. ' .
    'OPTIONAL {?low press:optgroup ?optgroup}. ' .
    'OPTIONAL {?low rdfs:subClassOf ?superclass}. ' .
  '}';

  $q = http_build_query(array('query' => $sparql));

  $options = array(
    'headers' => array(
      'Accept'=>'application/sparql-results+json',
      'content-type'=> 'application/x-www-form-urlencoded'),
    'method' => 'POST',
    'data' => $q
  );

  $result = drupal_http_request($blazegraph_info['blazegraph_url'], $options);   
  $num_json = json_decode($result->data);
  $result_array = array();
  foreach($num_json->results->bindings as $cat){
      $result_array[$cat->lowid->value] = $cat->pubCounter->value;
  }

  // watchdog("publication_mod get_pub_count", '<pre>%array</pre>' , 
  //   array(
  //     '%array' => print_r($result_array, true),
  //   ), WATCHDOG_NOTICE);

  return $result_array;
}

function publication_mod_save_project($id, $name, $acronym) {
  $blazegraph_info = _publication_mod_get_blazegraph_info(array('blazegraph_prefix', 'blazegraph_url', 'blazegraph_orgs'));

  $sparql = "prefix press: <" . $blazegraph_info['blazegraph_prefix'] . "> " .
    "DELETE { " .
      "<" . $blazegraph_info['blazegraph_prefix'] . "projects/" . $id . "> ?p ?o" .
    "} ".
    "INSERT { " .
      "<" . $blazegraph_info['blazegraph_prefix'] . "projects/" . $id . "> rdf:type press:Project; " .
      'press:projectName "' . $name . '"; '.
      'press:projectAcronym "' . $acronym . '"; '.
      'press:projectId "' . $id . '". '.
    "}".
    "WHERE {" . 
      "OPTIONAL{ <" . $blazegraph_info['blazegraph_prefix'] . "projects/" . $id . "> ?p ?o }." .
    "}";

  $q = http_build_query(array('update' => $sparql));

  $options = array(
    'headers' => array(
      'Accept'=>'html',
      'content-type'=> 'application/x-www-form-urlencoded'),
    'method' => 'POST',
    'data' => $q
  );

  $result = drupal_http_request($blazegraph_info['blazegraph_url'], $options);

  watchdog("publication_mod save_project", '<pre>%array</pre>' , 
    array(
      '%array' => print_r($result, true),
    ), WATCHDOG_NOTICE);

  if($result->code == 200) {
    return "<" . $blazegraph_info['blazegraph_prefix'] . "projects/" . $id . ">";
  }

  return $result;
}

/**
 * Implements hook_form_alter()
 * Used here to disable for the user to change some values based on their role.
 * @return type
 */
function publication_mod_form_alter(&$form, &$form_state, $form_id){
  global $user;

  switch ($form_id) {
    case 'user_profile_form':
      if(!publication_mod_user_has_role('administrator')){
        $form['pub_mod_field_organization']['#disabled'] = true;
        $form['pub_mod_field_blazegraph_uuid']['#disabled'] = true;
        $form['pub_mod_field_add_to_blzg']['#access'] = false;
      }
      $module_path = drupal_get_path('module', 'publication_mod');
      drupal_add_js($module_path . '/js/pressUserForm.js');
      break;
  }
}

/**
 * Checks if a user can edit a publication
 * @param string $pub The uri of the publication
 * @param string $user_uuid The uuid of the user
 * @param string $user_org The org of the user
 * @param bool $power_user If the user is a power user
 * @return bool
 */
function publication_mod_can_user_edit($pub, $user_uuid, $user_org, $power_user){
  $blazegraph_info = _publication_mod_get_blazegraph_info(array('blazegraph_url', 'blazegraph_prefix'));

  $query = "prefix press:<". $blazegraph_info['blazegraph_prefix'] ."> \n".
"select ?person ?org where { \n".
" { \n".
"   ?pub press:publicationUuid \"" . $pub . "\".  \n".
"   ?pub press:hasContributor ?conSlot.  \n".
"   ?con rdfs:subPropertyOf* press:contributorType.  \n".
"   ?conSlot ?con ?person.  \n".
" }UNION{ \n".
"   ?pub press:publicationUuid \"" . $pub . "\".  \n".
"   ?pub press:belongsTo ?org. \n".
" } \n".
"} \n";
  
  $q = http_build_query(array('query' => $query));

  $options = array(
    'headers' => array(
      'Accept'=>'application/sparql-results+json',
      'content-type'=> 'application/x-www-form-urlencoded'
    ),
    'method' => 'POST',
    'data' => $q
  );

  $result = drupal_http_request($blazegraph_info['blazegraph_url'], $options);
  
  $data = json_decode($result->data);

  $belongsToOrg = FALSE;
  $isContributor = FALSE;
  
  foreach ($data->results->bindings as $key => $value) {
    if(!$belongsToOrg && property_exists($value, 'org')){
      $ex_orgs = explode("/", $value->org->value);
      if($ex_orgs[count($ex_orgs) - 1] == $user_org){
        $belongsToOrg = TRUE;
      }
    }
    if(!$isContributor && property_exists($value, 'person')){
      if($value->person->value == $user_uuid){
        $isContributor = TRUE;
      }
    }
  }

  if($power_user){
    return $belongsToOrg;
  }
  return ($belongsToOrg && $isContributor);
}